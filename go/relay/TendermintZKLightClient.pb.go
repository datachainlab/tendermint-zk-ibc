// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/lightclients/tendermintzk/v1/TendermintZKLightClient.proto

package relay

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/cosmos/ibc-go/v7/modules/core/02-client/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ClientState struct {
	StepVerifierDigest []byte       `protobuf:"bytes,1,opt,name=step_verifier_digest,json=stepVerifierDigest,proto3" json:"step_verifier_digest,omitempty"`
	SkipVerifierDigest []byte       `protobuf:"bytes,2,opt,name=skip_verifier_digest,json=skipVerifierDigest,proto3" json:"skip_verifier_digest,omitempty"`
	TrustingPeriod     uint64       `protobuf:"varint,3,opt,name=trusting_period,json=trustingPeriod,proto3" json:"trusting_period,omitempty"`
	Frozen             bool         `protobuf:"varint,4,opt,name=frozen,proto3" json:"frozen,omitempty"`
	LatestHeight       types.Height `protobuf:"bytes,5,opt,name=latest_height,json=latestHeight,proto3" json:"latest_height"`
}

func (m *ClientState) Reset()         { *m = ClientState{} }
func (m *ClientState) String() string { return proto.CompactTextString(m) }
func (*ClientState) ProtoMessage()    {}
func (*ClientState) Descriptor() ([]byte, []int) {
	return fileDescriptor_b11ad8927b76a597, []int{0}
}
func (m *ClientState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientState.Merge(m, src)
}
func (m *ClientState) XXX_Size() int {
	return m.Size()
}
func (m *ClientState) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientState.DiscardUnknown(m)
}

var xxx_messageInfo_ClientState proto.InternalMessageInfo

type ConsensusState struct {
	BlockHash []byte `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	AppHash   []byte `protobuf:"bytes,2,opt,name=app_hash,json=appHash,proto3" json:"app_hash,omitempty"`
	Timestamp uint64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *ConsensusState) Reset()         { *m = ConsensusState{} }
func (m *ConsensusState) String() string { return proto.CompactTextString(m) }
func (*ConsensusState) ProtoMessage()    {}
func (*ConsensusState) Descriptor() ([]byte, []int) {
	return fileDescriptor_b11ad8927b76a597, []int{1}
}
func (m *ConsensusState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsensusState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsensusState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusState.Merge(m, src)
}
func (m *ConsensusState) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusState) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusState.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusState proto.InternalMessageInfo

type UpdateStateMessage struct {
	TrustedHeight      uint64   `protobuf:"varint,1,opt,name=trusted_height,json=trustedHeight,proto3" json:"trusted_height,omitempty"`
	UntrustedHeight    uint64   `protobuf:"varint,2,opt,name=untrusted_height,json=untrustedHeight,proto3" json:"untrusted_height,omitempty"`
	UntrustedBlockHash []byte   `protobuf:"bytes,3,opt,name=untrusted_block_hash,json=untrustedBlockHash,proto3" json:"untrusted_block_hash,omitempty"`
	Timestamp          uint64   `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	AppHash            []byte   `protobuf:"bytes,5,opt,name=app_hash,json=appHash,proto3" json:"app_hash,omitempty"`
	SimpleTreeProof    [][]byte `protobuf:"bytes,6,rep,name=simple_tree_proof,json=simpleTreeProof,proto3" json:"simple_tree_proof,omitempty"`
	Input              [][]byte `protobuf:"bytes,7,rep,name=input,proto3" json:"input,omitempty"`
	ZkProof            []byte   `protobuf:"bytes,8,opt,name=zk_proof,json=zkProof,proto3" json:"zk_proof,omitempty"`
}

func (m *UpdateStateMessage) Reset()         { *m = UpdateStateMessage{} }
func (m *UpdateStateMessage) String() string { return proto.CompactTextString(m) }
func (*UpdateStateMessage) ProtoMessage()    {}
func (*UpdateStateMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_b11ad8927b76a597, []int{2}
}
func (m *UpdateStateMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateStateMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateStateMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateStateMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateStateMessage.Merge(m, src)
}
func (m *UpdateStateMessage) XXX_Size() int {
	return m.Size()
}
func (m *UpdateStateMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateStateMessage.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateStateMessage proto.InternalMessageInfo

type Timestamp struct {
	// Represents seconds of UTC time since Unix epoch
	// 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
	// 9999-12-31T23:59:59Z inclusive.
	Seconds_ int64 `protobuf:"varint,1,opt,name=seconds_,json=seconds,proto3" json:"seconds_,omitempty"`
	// Non-negative fractions of a second at nanosecond resolution. Negative
	// second values with fractions must still have non-negative nanos values
	// that count forward in time. Must be from 0 to 999,999,999
	// inclusive.
	Nanos int32 `protobuf:"varint,2,opt,name=nanos,proto3" json:"nanos,omitempty"`
}

func (m *Timestamp) Reset()         { *m = Timestamp{} }
func (m *Timestamp) String() string { return proto.CompactTextString(m) }
func (*Timestamp) ProtoMessage()    {}
func (*Timestamp) Descriptor() ([]byte, []int) {
	return fileDescriptor_b11ad8927b76a597, []int{3}
}
func (m *Timestamp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Timestamp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Timestamp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Timestamp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Timestamp.Merge(m, src)
}
func (m *Timestamp) XXX_Size() int {
	return m.Size()
}
func (m *Timestamp) XXX_DiscardUnknown() {
	xxx_messageInfo_Timestamp.DiscardUnknown(m)
}

var xxx_messageInfo_Timestamp proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ClientState)(nil), "ibc.lightclients.tendermintzk.v1.ClientState")
	proto.RegisterType((*ConsensusState)(nil), "ibc.lightclients.tendermintzk.v1.ConsensusState")
	proto.RegisterType((*UpdateStateMessage)(nil), "ibc.lightclients.tendermintzk.v1.UpdateStateMessage")
	proto.RegisterType((*Timestamp)(nil), "ibc.lightclients.tendermintzk.v1.Timestamp")
}

func init() {
	proto.RegisterFile("ibc/lightclients/tendermintzk/v1/TendermintZKLightClient.proto", fileDescriptor_b11ad8927b76a597)
}

var fileDescriptor_b11ad8927b76a597 = []byte{
	// 563 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x53, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x8e, 0x9b, 0xa4, 0x3f, 0xdb, 0x3f, 0xb0, 0x22, 0x64, 0x2a, 0x70, 0xad, 0x48, 0x88, 0x80,
	0x54, 0xbb, 0x81, 0x2b, 0xe2, 0x90, 0x82, 0x54, 0x09, 0x10, 0x95, 0x09, 0x1c, 0x7a, 0xb1, 0xfc,
	0x33, 0xb1, 0x57, 0x76, 0x76, 0x57, 0xbb, 0x9b, 0x48, 0xcd, 0x53, 0xf0, 0x24, 0x3c, 0x47, 0x8e,
	0x3d, 0x72, 0x42, 0x90, 0x3c, 0x05, 0x37, 0xe4, 0x5d, 0x37, 0x75, 0xc2, 0xcd, 0xf3, 0xfd, 0xcc,
	0xcc, 0x37, 0xd6, 0xa2, 0xb7, 0x38, 0x8a, 0xbd, 0x02, 0xa7, 0x99, 0x8c, 0x0b, 0x0c, 0x44, 0x0a,
	0x4f, 0x02, 0x49, 0x80, 0x8f, 0x31, 0x91, 0xb3, 0xdc, 0x9b, 0xf6, 0xbd, 0xe1, 0xaa, 0xbe, 0xfe,
	0xf0, 0xb1, 0x14, 0x5e, 0x28, 0xa1, 0xcb, 0x38, 0x95, 0xd4, 0x74, 0x70, 0x14, 0xbb, 0x75, 0xbf,
	0x5b, 0xf7, 0xbb, 0xd3, 0xfe, 0x49, 0x27, 0xa5, 0x29, 0x55, 0x62, 0xaf, 0xfc, 0xd2, 0xbe, 0x93,
	0xd3, 0x72, 0x6e, 0x4c, 0x39, 0x78, 0xda, 0x57, 0x4e, 0x8a, 0x6b, 0x8d, 0xbb, 0x7f, 0x0d, 0xb4,
	0xaf, 0x27, 0x7d, 0x91, 0xa1, 0x04, 0xf3, 0x1c, 0x75, 0x84, 0x04, 0x16, 0x4c, 0x81, 0xe3, 0x11,
	0x06, 0x1e, 0x24, 0x38, 0x05, 0x21, 0x2d, 0xc3, 0x31, 0x7a, 0x07, 0xbe, 0x59, 0x72, 0xdf, 0x2a,
	0xea, 0x9d, 0x62, 0x94, 0x23, 0xc7, 0xff, 0x3b, 0xb6, 0x2a, 0x47, 0x8e, 0x37, 0x1d, 0xcf, 0xd1,
	0xb1, 0xe4, 0x13, 0x21, 0x31, 0x49, 0x03, 0x06, 0x1c, 0xd3, 0xc4, 0x6a, 0x3a, 0x46, 0xaf, 0xe5,
	0x1f, 0xdd, 0xc1, 0x57, 0x0a, 0x35, 0x1f, 0xa1, 0xed, 0x11, 0xa7, 0x33, 0x20, 0x56, 0xcb, 0x31,
	0x7a, 0xbb, 0x7e, 0x55, 0x99, 0xef, 0xd1, 0x61, 0x11, 0x4a, 0x10, 0x32, 0xc8, 0xa0, 0xbc, 0x89,
	0xd5, 0x76, 0x8c, 0xde, 0xfe, 0xab, 0x13, 0xb7, 0xbc, 0x52, 0x99, 0xd6, 0xad, 0x32, 0x4e, 0xfb,
	0xee, 0xa5, 0x52, 0x0c, 0x5a, 0xf3, 0x5f, 0xa7, 0x0d, 0xff, 0x40, 0xdb, 0x34, 0xd6, 0xcd, 0xd0,
	0xd1, 0x05, 0x25, 0x02, 0x88, 0x98, 0x08, 0x9d, 0xfe, 0x29, 0x42, 0x51, 0x41, 0xe3, 0x3c, 0xc8,
	0x42, 0x91, 0x55, 0x99, 0xf7, 0x14, 0x72, 0x19, 0x8a, 0xcc, 0x7c, 0x8c, 0x76, 0x43, 0xc6, 0x34,
	0xa9, 0xe3, 0xed, 0x84, 0x8c, 0x29, 0xea, 0x09, 0xda, 0x93, 0x78, 0x0c, 0x42, 0x86, 0x63, 0x56,
	0xa5, 0xb9, 0x07, 0xba, 0x3f, 0xb6, 0x90, 0xf9, 0x95, 0x25, 0xa1, 0x04, 0x35, 0xe7, 0x13, 0x08,
	0x11, 0xa6, 0x60, 0x3e, 0x43, 0x3a, 0x31, 0x24, 0x77, 0x41, 0x0c, 0xe5, 0x3c, 0xac, 0x50, 0xbd,
	0xa7, 0xf9, 0x02, 0x3d, 0x98, 0x90, 0x0d, 0xe1, 0x96, 0x12, 0x1e, 0xaf, 0xf0, 0x4a, 0x7a, 0x8e,
	0x3a, 0xf7, 0xd2, 0x5a, 0x94, 0xa6, 0xfe, 0x19, 0x2b, 0x6e, 0xb0, 0xca, 0xb4, 0xb6, 0x78, 0x6b,
	0x63, 0xf1, 0xb5, 0xc4, 0xed, 0xf5, 0xc4, 0x2f, 0xd1, 0x43, 0x81, 0xc7, 0xac, 0x80, 0x40, 0x72,
	0x80, 0x80, 0x71, 0x4a, 0x47, 0xd6, 0xb6, 0xd3, 0xec, 0x1d, 0xf8, 0xc7, 0x9a, 0x18, 0x72, 0x80,
	0xab, 0x12, 0x36, 0x3b, 0xa8, 0x8d, 0x09, 0x9b, 0x48, 0x6b, 0x47, 0xf1, 0xba, 0x28, 0x9b, 0xcf,
	0xf2, 0xca, 0xb8, 0xab, 0x9b, 0xcf, 0x72, 0x65, 0xe8, 0xbe, 0x41, 0x7b, 0xc3, 0xfa, 0x12, 0x02,
	0x62, 0x4a, 0x12, 0x11, 0xa8, 0x03, 0x35, 0xfd, 0x9d, 0xaa, 0x2e, 0x1b, 0x93, 0x90, 0x50, 0xa1,
	0xee, 0xd1, 0xf6, 0x75, 0x31, 0xf8, 0x3c, 0xff, 0x63, 0x37, 0xe6, 0x0b, 0xdb, 0xb8, 0x5d, 0xd8,
	0xc6, 0xef, 0x85, 0x6d, 0x7c, 0x5f, 0xda, 0x8d, 0xdb, 0xa5, 0xdd, 0xf8, 0xb9, 0xb4, 0x1b, 0xd7,
	0xfd, 0x14, 0xcb, 0x6c, 0x12, 0xb9, 0x31, 0x1d, 0x7b, 0x38, 0x8a, 0xcf, 0x04, 0x2d, 0x70, 0x82,
	0xe5, 0x4d, 0xed, 0x49, 0x9e, 0xcd, 0xf2, 0xb3, 0x22, 0xf6, 0x52, 0xea, 0x71, 0x28, 0xc2, 0x9b,
	0x68, 0x5b, 0x3d, 0x96, 0xd7, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x09, 0x40, 0x26, 0x33, 0xc7,
	0x03, 0x00, 0x00,
}

func (m *ClientState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.LatestHeight.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTendermintZKLightClient(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.Frozen {
		i--
		if m.Frozen {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.TrustingPeriod != 0 {
		i = encodeVarintTendermintZKLightClient(dAtA, i, uint64(m.TrustingPeriod))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SkipVerifierDigest) > 0 {
		i -= len(m.SkipVerifierDigest)
		copy(dAtA[i:], m.SkipVerifierDigest)
		i = encodeVarintTendermintZKLightClient(dAtA, i, uint64(len(m.SkipVerifierDigest)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StepVerifierDigest) > 0 {
		i -= len(m.StepVerifierDigest)
		copy(dAtA[i:], m.StepVerifierDigest)
		i = encodeVarintTendermintZKLightClient(dAtA, i, uint64(len(m.StepVerifierDigest)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConsensusState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsensusState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintTendermintZKLightClient(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x18
	}
	if len(m.AppHash) > 0 {
		i -= len(m.AppHash)
		copy(dAtA[i:], m.AppHash)
		i = encodeVarintTendermintZKLightClient(dAtA, i, uint64(len(m.AppHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BlockHash) > 0 {
		i -= len(m.BlockHash)
		copy(dAtA[i:], m.BlockHash)
		i = encodeVarintTendermintZKLightClient(dAtA, i, uint64(len(m.BlockHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateStateMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateStateMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateStateMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ZkProof) > 0 {
		i -= len(m.ZkProof)
		copy(dAtA[i:], m.ZkProof)
		i = encodeVarintTendermintZKLightClient(dAtA, i, uint64(len(m.ZkProof)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Input) > 0 {
		for iNdEx := len(m.Input) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Input[iNdEx])
			copy(dAtA[i:], m.Input[iNdEx])
			i = encodeVarintTendermintZKLightClient(dAtA, i, uint64(len(m.Input[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.SimpleTreeProof) > 0 {
		for iNdEx := len(m.SimpleTreeProof) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SimpleTreeProof[iNdEx])
			copy(dAtA[i:], m.SimpleTreeProof[iNdEx])
			i = encodeVarintTendermintZKLightClient(dAtA, i, uint64(len(m.SimpleTreeProof[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.AppHash) > 0 {
		i -= len(m.AppHash)
		copy(dAtA[i:], m.AppHash)
		i = encodeVarintTendermintZKLightClient(dAtA, i, uint64(len(m.AppHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Timestamp != 0 {
		i = encodeVarintTendermintZKLightClient(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x20
	}
	if len(m.UntrustedBlockHash) > 0 {
		i -= len(m.UntrustedBlockHash)
		copy(dAtA[i:], m.UntrustedBlockHash)
		i = encodeVarintTendermintZKLightClient(dAtA, i, uint64(len(m.UntrustedBlockHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.UntrustedHeight != 0 {
		i = encodeVarintTendermintZKLightClient(dAtA, i, uint64(m.UntrustedHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.TrustedHeight != 0 {
		i = encodeVarintTendermintZKLightClient(dAtA, i, uint64(m.TrustedHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Timestamp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Timestamp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Timestamp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nanos != 0 {
		i = encodeVarintTendermintZKLightClient(dAtA, i, uint64(m.Nanos))
		i--
		dAtA[i] = 0x10
	}
	if m.Seconds_ != 0 {
		i = encodeVarintTendermintZKLightClient(dAtA, i, uint64(m.Seconds_))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTendermintZKLightClient(dAtA []byte, offset int, v uint64) int {
	offset -= sovTendermintZKLightClient(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ClientState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StepVerifierDigest)
	if l > 0 {
		n += 1 + l + sovTendermintZKLightClient(uint64(l))
	}
	l = len(m.SkipVerifierDigest)
	if l > 0 {
		n += 1 + l + sovTendermintZKLightClient(uint64(l))
	}
	if m.TrustingPeriod != 0 {
		n += 1 + sovTendermintZKLightClient(uint64(m.TrustingPeriod))
	}
	if m.Frozen {
		n += 2
	}
	l = m.LatestHeight.Size()
	n += 1 + l + sovTendermintZKLightClient(uint64(l))
	return n
}

func (m *ConsensusState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovTendermintZKLightClient(uint64(l))
	}
	l = len(m.AppHash)
	if l > 0 {
		n += 1 + l + sovTendermintZKLightClient(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovTendermintZKLightClient(uint64(m.Timestamp))
	}
	return n
}

func (m *UpdateStateMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TrustedHeight != 0 {
		n += 1 + sovTendermintZKLightClient(uint64(m.TrustedHeight))
	}
	if m.UntrustedHeight != 0 {
		n += 1 + sovTendermintZKLightClient(uint64(m.UntrustedHeight))
	}
	l = len(m.UntrustedBlockHash)
	if l > 0 {
		n += 1 + l + sovTendermintZKLightClient(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovTendermintZKLightClient(uint64(m.Timestamp))
	}
	l = len(m.AppHash)
	if l > 0 {
		n += 1 + l + sovTendermintZKLightClient(uint64(l))
	}
	if len(m.SimpleTreeProof) > 0 {
		for _, b := range m.SimpleTreeProof {
			l = len(b)
			n += 1 + l + sovTendermintZKLightClient(uint64(l))
		}
	}
	if len(m.Input) > 0 {
		for _, b := range m.Input {
			l = len(b)
			n += 1 + l + sovTendermintZKLightClient(uint64(l))
		}
	}
	l = len(m.ZkProof)
	if l > 0 {
		n += 1 + l + sovTendermintZKLightClient(uint64(l))
	}
	return n
}

func (m *Timestamp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seconds_ != 0 {
		n += 1 + sovTendermintZKLightClient(uint64(m.Seconds_))
	}
	if m.Nanos != 0 {
		n += 1 + sovTendermintZKLightClient(uint64(m.Nanos))
	}
	return n
}

func sovTendermintZKLightClient(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTendermintZKLightClient(x uint64) (n int) {
	return sovTendermintZKLightClient(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClientState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTendermintZKLightClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StepVerifierDigest", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTendermintZKLightClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTendermintZKLightClient
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTendermintZKLightClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StepVerifierDigest = append(m.StepVerifierDigest[:0], dAtA[iNdEx:postIndex]...)
			if m.StepVerifierDigest == nil {
				m.StepVerifierDigest = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipVerifierDigest", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTendermintZKLightClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTendermintZKLightClient
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTendermintZKLightClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SkipVerifierDigest = append(m.SkipVerifierDigest[:0], dAtA[iNdEx:postIndex]...)
			if m.SkipVerifierDigest == nil {
				m.SkipVerifierDigest = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustingPeriod", wireType)
			}
			m.TrustingPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTendermintZKLightClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrustingPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frozen", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTendermintZKLightClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Frozen = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTendermintZKLightClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTendermintZKLightClient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTendermintZKLightClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LatestHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTendermintZKLightClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTendermintZKLightClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTendermintZKLightClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTendermintZKLightClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTendermintZKLightClient
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTendermintZKLightClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = append(m.BlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockHash == nil {
				m.BlockHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTendermintZKLightClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTendermintZKLightClient
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTendermintZKLightClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppHash = append(m.AppHash[:0], dAtA[iNdEx:postIndex]...)
			if m.AppHash == nil {
				m.AppHash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTendermintZKLightClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTendermintZKLightClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTendermintZKLightClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateStateMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTendermintZKLightClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateStateMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateStateMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedHeight", wireType)
			}
			m.TrustedHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTendermintZKLightClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrustedHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UntrustedHeight", wireType)
			}
			m.UntrustedHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTendermintZKLightClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UntrustedHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UntrustedBlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTendermintZKLightClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTendermintZKLightClient
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTendermintZKLightClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UntrustedBlockHash = append(m.UntrustedBlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.UntrustedBlockHash == nil {
				m.UntrustedBlockHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTendermintZKLightClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTendermintZKLightClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTendermintZKLightClient
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTendermintZKLightClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppHash = append(m.AppHash[:0], dAtA[iNdEx:postIndex]...)
			if m.AppHash == nil {
				m.AppHash = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SimpleTreeProof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTendermintZKLightClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTendermintZKLightClient
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTendermintZKLightClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SimpleTreeProof = append(m.SimpleTreeProof, make([]byte, postIndex-iNdEx))
			copy(m.SimpleTreeProof[len(m.SimpleTreeProof)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTendermintZKLightClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTendermintZKLightClient
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTendermintZKLightClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Input = append(m.Input, make([]byte, postIndex-iNdEx))
			copy(m.Input[len(m.Input)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZkProof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTendermintZKLightClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTendermintZKLightClient
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTendermintZKLightClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZkProof = append(m.ZkProof[:0], dAtA[iNdEx:postIndex]...)
			if m.ZkProof == nil {
				m.ZkProof = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTendermintZKLightClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTendermintZKLightClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Timestamp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTendermintZKLightClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Timestamp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Timestamp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seconds_", wireType)
			}
			m.Seconds_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTendermintZKLightClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seconds_ |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nanos", wireType)
			}
			m.Nanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTendermintZKLightClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nanos |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTendermintZKLightClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTendermintZKLightClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTendermintZKLightClient(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTendermintZKLightClient
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTendermintZKLightClient
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTendermintZKLightClient
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTendermintZKLightClient
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTendermintZKLightClient
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTendermintZKLightClient
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTendermintZKLightClient        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTendermintZKLightClient          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTendermintZKLightClient = fmt.Errorf("proto: unexpected end of group")
)
